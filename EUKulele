## Draft Snakefile Sketch
import os
import pandas as pd

configfile: "config.yaml"  

## VARIABLES ##
CONSENSUS_CUTOFF = config['consensus_cutoff']
REFERENCE_DIR = config['reference']
OUTPUTDIR = config['output']
DATABASE_DIR = os.path.join(config['database'], "database")
SAMPLE_DIR = config['samples']
REF_FASTA = config['ref_fasta']
TAX_TAB = config['ref_tax']
PROT_TAB = config['ref_prot']
ALIGNMENT_CHOICE = config['alignment_choice']
IFPARALLEL = config['choose_parallel']
OUTPUT_EXTENSION = "txt"
DBEXTENSION = ""
TRANSDECODERORFSIZE=config['transdecoder_orfsize']
if ALIGNMENT_CHOICE == "diamond":
    OUTPUT_EXTENSION = "out"
    DBEXTENSION = ".dmnd"
NT_EXT = config['nucleotide_extension'].strip('.')
PEP_EXT = config['protein_extension'].strip('.')
mets_or_mags=config['mets_or_mags'].lower()
USE_SALMON_COUNTS = config["use_salmon_counts"]
SALMON_DIR = config["salmon_dir"]
NAMES_TO_READS = config["names_to_reads"]

assert mets_or_mags in ['mets', 'mags']

def get_all_names(parallel,METs):
    filenames = [os.path.join(OUTPUTDIR, "METs", curr + "-estimated-taxonomy-" + parallel + ".out") for curr in METs]
    return filenames
    
def get_alignment(ALIGNMENT_CHOICE, sampletype, filename):
    sampletype=sampletype.lower()
    if sampletype== "mets":
        if ALIGNMENT_CHOICE == "diamond":
            return os.path.join(OUTPUTDIR, "METs", "diamond", filename + ".diamond.out")
        elif ALIGNMENT_CHOICE == "blast":
            return os.path.join(OUTPUTDIR, "METs", "blast", filename + ".blast.txt")
    elif sampletype == "mags":
        if ALIGNMENT_CHOICE == "diamond":
            return os.path.join(OUTPUTDIR, "MAGs", "diamond", filename + ".diamond.out")
        elif ALIGNMENT_CHOICE == "blast":
            return os.path.join(OUTPUTDIR, "MAGs", "blast", filename + ".blast.txt")
   
MTS, = glob_wildcards(os.path.join(SAMPLE_DIR, "METs", "{T}"+ "." + NT_EXT)) # should normally be in METs folder   
MAG, = glob_wildcards(os.path.join(SAMPLE_DIR, "MAGs", "{G}"+ "." + PEP_EXT))

if not MTS:
    MTS,=glob_wildcards(os.path.join(SAMPLE_DIR, "METs", "{T}"+ "." + PEP_EXT))

if mets_or_mags=='mags':
    MTS=[]
elif mets_or_mags=='mets':
    MAG=[]

   
print(MTS)

rule all: 
    input:
        ref_db = expand(os.path.join(DATABASE_DIR, "{aligner}", REF_FASTA.strip('.fa') + "{extension}"), aligner = ALIGNMENT_CHOICE, extension = DBEXTENSION),
        mt_prot = expand(os.path.join(OUTPUTDIR, "METs","{T}.{extension}"), T=MTS, extension=PEP_EXT),
        mt_aln = expand(os.path.join(OUTPUTDIR, "METs", "{aligner}", "{T}.{aligner}.{extension}"), T = MTS, aligner = ALIGNMENT_CHOICE, extension = OUTPUT_EXTENSION), 
        mt_tax = expand(os.path.join(OUTPUTDIR, "METs", "{T}-estimated-taxonomy-{ifparallel}.out"), T = MTS, ifparallel = IFPARALLEL), 
        mt_tax_viz = expand(os.path.join(OUTPUTDIR,OUTPUTDIR.split("/")[-1] + "all_species_counts_{ifparallel}.csv"),ifparallel = IFPARALLEL),
        mag_aln = expand(os.path.join(OUTPUTDIR, "MAGs", "{aligner}", "{G}.{aligner}.{extension}"), G = MAG, aligner = ALIGNMENT_CHOICE, extension = OUTPUT_EXTENSION), 
        mag_tax = expand(os.path.join(OUTPUTDIR, "MAGs", "{G}-estimated-taxonomy.out"), G = MAG), 
        mag_assignment = expand(os.path.join(OUTPUTDIR, "MAGs", "{G}-max-level.csv"), G = MAG)
 
rule setup_reference:
    input: os.path.join(REFERENCE_DIR, REF_FASTA)
    output: os.path.join(DATABASE_DIR, "diamond", REF_FASTA.strip('.fa') + ".dmnd")
    params:
        diamondfile = os.path.join(REFERENCE_DIR, REF_FASTA.strip('.fa') + '.dmnd'),
        db = os.path.join(DATABASE_DIR, "diamond", REF_FASTA.strip('.fa'))
    conda:
         "envs/diamond.yaml"
    shell:
        """
        diamond makedb --in {input} --db {params.db}
        """
        
rule setup_reference_blast:
    input: os.path.join(REFERENCE_DIR, REF_FASTA)
    output: directory(os.path.join(DATABASE_DIR, "blast", REF_FASTA.strip('.fa')))
    params:
        db = os.path.join(DATABASE_DIR, "blast", REF_FASTA.strip('.fa'), "database"),
        db_name = "MMETSPDatabase",
        db_type = "prot",
        blast_version = 5
    conda:
         "envs/blast.yaml"
    shell:
        """
        makeblastdb -in {input} -parse_seqids -blastdb_version {params.blast_version} -title {params.db_name} -dbtype {params.db_type} -out {params.db}
        """

rule transdecoder:
    input:
        nt_mets = os.path.join(SAMPLE_DIR, "METs", "{T}." + NT_EXT)  # normally, within METs folder 
    output:
        pep = os.path.join(OUTPUTDIR, "METs",  "{T}." + PEP_EXT),
        gff = os.path.join(OUTPUTDIR, "METs", "transdecoder", "{T}.fasta.transdecoder.gff3"),
        cds = os.path.join(OUTPUTDIR, "METs", "transdecoder", "{T}.fasta.transdecoder.cds"),
        bed = os.path.join(OUTPUTDIR, "METs", "transdecoder", "{T}.fasta.transdecoder.bed")
    log:
        err = os.path.join("logs","transdecoder","orig_{T}_err.log"),
        out = os.path.join("logs","transdecoder","orig_{T}_out.log")
    params:
        merged = "{T}."+ NT_EXT,
        size = TRANSDECODERORFSIZE
    conda: 
        "envs/transdecoder-env.yaml"
    shell:
        """
        TransDecoder.LongOrfs -t {input.nt_mets} -m {params.size} 2> {log.err} 1> {log.out}
        TransDecoder.Predict -t {input.nt_mets} --no_refine_starts 2>> {log.err} 1>> {log.out}
        mv {params.merged}.transdecoder.pep {output.pep}
        mv {params.merged}.transdecoder.cds {output.cds}
        mv {params.merged}.transdecoder.gff3 {output.gff}
        mv {params.merged}.transdecoder.bed {output.bed}
        rm -rf {params.merged}.transdecoder_dir*
        rm -rf pipeliner.*.cmds
        """

rule align_METs_against_db:
  ## runs alignment against reference DB and generates .aln files for each contig in each samples
    input:
        dmnd = os.path.join(DATABASE_DIR, "diamond", REF_FASTA.strip('.fa') + '.dmnd'), 
        fasta = os.path.join(OUTPUTDIR, "METs", "{T}." + PEP_EXT) 
    output:
        os.path.join(OUTPUTDIR, "METs", "diamond", "{T}.diamond.out")
    params:
        other = "--outfmt 6 -k 100 -e 1e-5",
        outfmt = 6,
        k = 100,
        e = 1e-5
    conda:
        "envs/diamond.yaml"
    shell:
        """
        diamond blastp --db {input.dmnd} -q {input.fasta} -o {output} --outfmt {params.outfmt} -k {params.k} -e {params.e}
        """

rule align_METs_against_db_blast:
  ## runs alignment against reference DB and generates .aln files for each contig in each samples
    input:
        blast = os.path.join(DATABASE_DIR, "blast", REF_FASTA.strip('.fa')), 
        fasta = os.path.join(OUTPUTDIR, "METs", "{T}." + PEP_EXT) 
    output:
        os.path.join(OUTPUTDIR, "METs", "blast", "{T}.blast.txt")
    params:
        db = os.path.join(DATABASE_DIR, "blast", REF_FASTA.strip('.fa'), "database"),
        outfmt = 6, # tabular output format
        e = 1e-5
    conda:
        "envs/blast.yaml"
    shell:
        """
        export BLASTDB={params.db}
        blastp -query {input.fasta} -db {params.db} -out {output} -outfmt {params.outfmt} -evalue {params.e}
        """

rule align_MAGs_against_db:
  ## runs alignment against reference DB and generates .aln files for each contig in each samples
    input:
        dmnd = os.path.join(DATABASE_DIR, "diamond", REF_FASTA.strip('.fa')+'.dmnd'), 
        fasta = os.path.join(SAMPLE_DIR, "MAGs", "{G}."+PEP_EXT)
    output:
        os.path.join(OUTPUTDIR, "MAGs", "diamond", "{G}.diamond.out")
    params:
        other ="--outfmt 6 -k 100 -e 1e-5",
        outfmt = 6,
        k = 100,
        e = 1e-5
    conda:
        "envs/diamond.yaml"
    shell:
        """
        diamond blastp --db {input.dmnd} -q {input.fasta} -o {output} --outfmt {params.outfmt} -k {params.k} -e {params.e}
        """ 
        
rule align_MAGs_against_db_blast:
  ## runs alignment against reference DB and generates .aln files for each contig in each samples
    input:
        blast = os.path.join(DATABASE_DIR, "blast", REF_FASTA.strip('.fa')), 
        fasta = os.path.join(SAMPLE_DIR, "MAGs", "{G}"+PEP_EXT) 
    output:
        os.path.join(OUTPUTDIR, "MAGs", "blast", "{G}.blast.txt")
    params:
        db = os.path.join(DATABASE_DIR, "blast", REF_FASTA.strip('.fa'), "database"),
        outfmt = 6, # tabular output format
        e = 1e-5
    conda:
        "envs/blast.yaml"
    shell:
        """
        export BLASTDB={params.db}
        blastp -query {input.fasta} -db {params.db} -out {output} -outfmt {params.outfmt} -evalue {params.e}
        """ 

#rule estimate_taxonomy_MAG:
  ## based on hits within a MAG file -- estimates the LCA for each MAG based on reference DB
  ## include an additional file that estimates the contamination (?) or shows next highest hits with the MAG
  ## provide basic statistics on the hits
   
rule estimate_taxonomy_METs:
    input: 
        file = lambda filename: get_alignment(ALIGNMENT_CHOICE, sampletype= "METs", filename = filename.T) 
    output: 
        outfile = os.path.join(OUTPUTDIR, "METs", "{T}-estimated-taxonomy-{parallel}.out")
    params:
        consensus = CONSENSUS_CUTOFF,
        method = "{parallel}",
        tax_file = os.path.join(config['reference'], config['ref_tax']),
        use_counts = USE_SALMON_COUNTS,
        names_to_reads = os.path.join(config['reference'], NAMES_TO_READS),
        outfile_series = os.path.join(OUTPUTDIR, "METs", "{T}-estimated-taxonomy.out"),
        prot_json = os.path.join(config['reference'], config['ref_prot']),
        cutoff = config['cutoff']
    conda: 
        'envs/estimate.yaml'
    shell:
        """
        echo {input.file}
        if [ {params.use_counts} == 1 ]; then
            python scripts/names-to-reads.py
        fi
        time python scripts/tax-placement.py --tax_file {params.tax_file} --cutoff_file {params.cutoff} --prot_map_file {params.prot_json} --diamond_file {input.file} --names_to_reads {params.names_to_reads} --use_counts {params.use_counts} --outfile {output.outfile} --method {params.method} --consensus_cutoff {params.consensus}
        """
        
rule visualize_taxonomy_METs:
    input:
        lambda filename: get_all_names(parallel = filename.parallel, METs = MTS)
    output:
        os.path.join(OUTPUTDIR,OUTPUTDIR.split("/")[-1] + "all_species_counts_{parallel}.csv")
    params:
        prefix = OUTPUTDIR.split("/")[-1],
        outputdir = OUTPUTDIR
    conda:
        'envs/visualize.yaml'
    shell:
        """
        python scripts/visualize-results.py --out_prefix {params.prefix} --output_dir {params.outputdir}
        """
    

rule estimate_taxonomy_MAG_proteins:
    input: 
        file = lambda filename: get_alignment(ALIGNMENT_CHOICE, sampletype= "MAGs", filename = filename.G) 
    output: os.path.join(OUTPUTDIR, "MAGs", "{G}-estimated-taxonomy.out")
    params:
        consensus = CONSENSUS_CUTOFF,
        tax_file = os.path.join(config['reference'], config['ref_tax']),
        prot_json = os.path.join(config['reference'], config['ref_prot']),
        cutoff = config['cutoff']
    conda: 
        'envs/estimate.yaml'
    shell:
        """
        python scripts/tax-placement.py --tax_file {params.tax_file} --cutoff_file {params.cutoff} --prot_map_file {params.prot_json} --diamond_file {input.file} --outfile {output} --consensus_cutoff {params.consensus}
        """

rule assign_MAG_taxonomy:
    input: os.path.join(OUTPUTDIR, "MAGs", "{G}-estimated-taxonomy.out")
    output: os.path.join(OUTPUTDIR, "MAGs", "{G}-max-level.csv")
    params: 
        prefix = '{G}',
        levels_directory = os.path.join(OUTPUTDIR, "MAGs", "levels"),
        max_dir = os.path.join(OUTPUTDIR, "MAGs")
    conda: 
        'envs/estimate.yaml'
    shell:
        """
        python scripts/mag-stats.py --estimated-taxonomy-file {input} --out-prefix {params.prefix} --outdir {params.levels_directory} --max-out-dir {params.max_dir}
        """
